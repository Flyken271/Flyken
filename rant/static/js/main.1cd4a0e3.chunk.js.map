{"version":3,"sources":["Navbar.js","Card1.js","Footer1.js","App.js","serviceWorker.js","index.js"],"names":["Navbar1","props","useState","isOpen","setIsOpen","Navbar","id","color","dark","expand","NavbarBrand","href","navbarBrand","NavbarToggler","onClick","Collapse","navbar","Nav","className","NavbarText","Button","Card1","Card","CardBody","CardImg","src","image","CardTitle","title","CardSubtitle","subTitle","CardText","content","Footer1","style","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"mSAiCeA,EAtBC,SAACC,GAAW,IAAD,EACGC,oBAAS,GADZ,mBAClBC,EADkB,KACVC,EADU,KAKzB,OACE,6BACE,kBAACC,EAAA,EAAD,CAAQC,GAAG,UAAUC,MAAM,OAAOC,MAAI,EAACC,OAAO,MAC5C,kBAACC,EAAA,EAAD,CAAaJ,GAAG,eAAeK,KAAK,KAAKV,EAAMW,aAC/C,kBAACC,EAAA,EAAD,CAAeC,QANN,kBAAMV,GAAWD,MAO1B,kBAACY,EAAA,EAAD,CAAUZ,OAAQA,EAAQa,QAAM,GAC9B,kBAACC,EAAA,EAAD,CAAKC,UAAU,UAAUF,QAAM,GAC/B,kBAACG,EAAA,EAAD,CAAYb,GAAG,gBAAf,SAEA,kBAACc,EAAA,EAAD,CAAQb,MAAM,OAAOD,GAAG,aAAxB,YACA,kBAACc,EAAA,EAAD,CAAQb,MAAM,UAAUD,GAAG,aAA3B,c,gDCLKe,EAfD,SAACpB,GACb,OACE,6BACE,kBAACqB,EAAA,EAAD,CAAMhB,GAAG,eACP,kBAACiB,EAAA,EAAD,KACE,kBAACC,EAAA,EAAD,CAASlB,GAAG,UAAUmB,IAAKxB,EAAMyB,QACjC,kBAACC,EAAA,EAAD,CAAWrB,GAAG,aAAaL,EAAM2B,OACjC,kBAACC,EAAA,EAAD,CAAcvB,GAAG,WAAWL,EAAM6B,UAClC,kBAACC,EAAA,EAAD,KAAW9B,EAAM+B,aCcZC,EAnBC,SAAChC,GAAW,IAAD,EACGC,oBAAS,GADZ,mBAClBC,EADkB,KACVC,EADU,KAKzB,OACE,6BACE,kBAACC,EAAA,EAAD,CAAQC,GAAG,UAAUC,MAAM,OAAOC,MAAI,EAACC,OAAO,MAC5C,kBAACI,EAAA,EAAD,CAAeC,QALN,kBAAMV,GAAWD,MAM1B,kBAACY,EAAA,EAAD,CAAUZ,OAAQA,EAAQa,QAAM,GAC9B,kBAACC,EAAA,EAAD,CAAKC,UAAU,UAAUF,QAAM,GAC/B,kBAACG,EAAA,EAAD,KAAY,wBAAIe,MAAO,CAAC3B,MAAO,SAAnB,uCAAZ,MAAgF,uBAAGD,GAAG,aAAaK,KAAK,sBAAxB,eCO3EwB,MAnBf,WAEE,OACE,yBAAKjB,UAAU,OACb,kBAAC,EAAD,CAASN,YAAY,SACrB,yBAAKM,UAAU,aACb,yBAAKA,UAAU,OACX,kBAAC,EAAD,CAAOU,MAAM,oBAAoBE,SAAS,OAAOE,QAAQ,GAAGN,MAAM,gFAClE,kBAAC,EAAD,CAAOE,MAAM,qBAAqBE,SAAS,YAAYE,QAAQ,GAAGN,MAAM,iFACxE,kBAAC,EAAD,CAAOE,MAAM,gBAAgBE,SAAS,eAAeE,QAAQ,GAAGN,MAAM,gIACtE,kBAAC,EAAD,CAAOE,MAAM,WAAWE,SAAS,YAAYE,QAAQ,GAAGN,MAAM,uFAC9D,kBAAC,EAAD,CAAOE,MAAM,oBAAoBE,SAAS,YAAYE,QAAQ,GAAGN,MAAM,4GAG7E,kBAAC,EAAD,QCVcU,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2D,MCXNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDwHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.1cd4a0e3.chunk.js","sourcesContent":["import React, { useState } from 'react';\r\nimport {\r\n  Collapse,\r\n  Navbar,\r\n  NavbarToggler,\r\n  NavbarBrand,\r\n  Nav,\r\n  NavbarText,\r\n  Button\r\n} from 'reactstrap';\r\n\r\nconst Navbar1 = (props) => {\r\n  const [isOpen, setIsOpen] = useState(false);\r\n\r\n  const toggle = () => setIsOpen(!isOpen);\r\n\r\n  return (\r\n    <div>\r\n      <Navbar id=\"navbar1\" color=\"dark\" dark expand=\"md\">\r\n        <NavbarBrand id=\"navbarbrand1\" href=\"/\">{props.navbarBrand}</NavbarBrand>\r\n        <NavbarToggler onClick={toggle} />\r\n        <Collapse isOpen={isOpen} navbar>\r\n          <Nav className=\"mr-auto\" navbar>\r\n          <NavbarText id=\"navbarbrand2\">Demo</NavbarText>\r\n          </Nav>\r\n          <Button color=\"info\" id=\"logbutton\">Register</Button>\r\n          <Button color=\"success\" id=\"logbutton\">Log in</Button>\r\n        </Collapse>\r\n      </Navbar>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Navbar1;","import React from 'react';\r\nimport {\r\n  Card, CardText, CardBody,\r\n  CardTitle, CardSubtitle, CardImg\r\n} from 'reactstrap';\r\n\r\nconst Card1 = (props) => {\r\n  return (\r\n    <div>\r\n      <Card id=\"serverStats\">\r\n        <CardBody>\r\n          <CardImg id=\"cardImg\" src={props.image} />\r\n          <CardTitle id=\"cardTitle\">{props.title}</CardTitle>\r\n          <CardSubtitle id=\"cardSub\">{props.subTitle}</CardSubtitle>\r\n          <CardText>{props.content}</CardText>\r\n        </CardBody>\r\n      </Card>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Card1;","import React, { useState } from 'react';\r\nimport {\r\n  Collapse,\r\n  Navbar,\r\n  NavbarToggler,\r\n  Nav,\r\n  NavbarText,\r\n} from 'reactstrap';\r\n\r\nconst Footer1 = (props) => {\r\n  const [isOpen, setIsOpen] = useState(false);\r\n\r\n  const toggle = () => setIsOpen(!isOpen);\r\n\r\n  return (\r\n    <div>\r\n      <Navbar id=\"Footer1\" color=\"dark\" dark expand=\"md\">\r\n        <NavbarToggler onClick={toggle} />\r\n        <Collapse isOpen={isOpen} navbar>\r\n          <Nav className=\"mr-auto\" navbar>\r\n          <NavbarText><h4 style={{color: \"grey\"}}>All rights reserved. Copyright Â©</h4>by <a id=\"footerlink\" href=\"https://flyken.org\">Jared</a></NavbarText>\r\n          </Nav>\r\n        </Collapse>\r\n      </Navbar>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Footer1;","import React from 'react';\nimport './App.css';\nimport Navbar1 from './Navbar';\nimport Card1 from './Card1';\n//import JumboInfo from './JumboInfo';\n//import CardWButton from './CardWButton';\nimport Footer1 from './Footer1';\n\nfunction App() {\n\n  return (\n    <div className=\"App\">\n      <Navbar1 navbarBrand=\"Rant\"/>\n      <div className=\"container\">\n        <div className=\"row\">\n            <Card1 title=\"Bad Boys for Life\" subTitle=\"Sony\" content=\"\" image=\"https://upload.wikimedia.org/wikipedia/en/9/90/Bad_Boys_for_Life_poster.jpg\" />\n            <Card1 title=\"Sonic the Hedgehog\" subTitle=\"Paramount\" content=\"\" image=\"https://upload.wikimedia.org/wikipedia/en/c/c1/Sonic_the_Hedgehog_poster.jpg\" />\n            <Card1 title=\"Birds of Prey\" subTitle=\"Warner Bros.\" content=\"\" image=\"https://upload.wikimedia.org/wikipedia/en/6/60/Birds_of_Prey_%28and_the_Fantabulous_Emancipation_of_one_Harley_Quinn%29.jpg\" />\n            <Card1 title=\"Dolittle\" subTitle=\"Universal\" content=\"\" image=\"https://upload.wikimedia.org/wikipedia/en/1/1f/Dolittle_%282020_film_poster%29.png\" />\n            <Card1 title=\"The Invisible Man\" subTitle=\"Universal\" content=\"\" image=\"https://upload.wikimedia.org/wikipedia/en/3/3a/The_Invisible_Man_%282020_film%29_-_release_poster.jpg\" />\n        </div>\n      </div>\n      <Footer1 />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport 'bootstrap/dist/css/bootstrap.min.css';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}